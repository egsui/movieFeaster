plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
// https://docs.gradle.org/current/userguide/pmd_plugin.html#header
    id 'pmd'

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
    id 'checkstyle'
}

checkstyle {
    configFile = file("./checkstyle-rules.xml") // Relative to build.gradle
    toolVersion = '10.3' // or whichever version you want to use
}

group = 'com.moviefeaster'
version = '1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.2'


    // optional, left these in here in case you wanted to use them.
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.3'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'com.opencsv:opencsv:5.8'
    // Jackson Core
//    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'
//    // Jackson Annotations
//    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
//    // Jackson Databind
//    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
//    // jackson dataformat xml
//    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.1'
//    implementation 'com.fasterxml.woodstox:woodstox-core:6.5.0'
//    // jackson dataformat csv
//    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.0'
    // okhttp for api pull request
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    // dotenv for loading .env file
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

pmd {
    ignoreFailures=true
    pmdTest.enabled=false
    ruleSets = [
            "category/java/bestpractices.xml",
            "category/java/errorprone.xml",
            "category/java/codestyle.xml"
            //"java-basic",
            //"java-braces",
            //"java-strings",
    ]
}

javadoc {
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/docs/javadoc/index.html"
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/jacocoHtml"))
    }
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/jacocoHtml/index.html"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // minimum percentage of code coverage
                minimum = 0.2
            }
        }
        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

// Fail the build if code coverage isn't high enough
check.dependsOn jacocoTestCoverageVerification

// Run code coverage after tests run
jacocoTestReport.mustRunAfter test


task doAll {
    // Runs a java build. Imported from the java plugin
    dependsOn build
    // Runs all the tests. Imported from the java plugin.
    dependsOn test
    // Runs pmd. Imported by pmd plugin
    dependsOn check
    // Runs java doc. Imported from the java plugin
    dependsOn javadoc
    println 'all done!'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
